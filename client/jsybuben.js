(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.jsybuben = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var api = {
    to_aybuben: require("./converter").parse
};

module.exports = api;

},{"./converter":2}],2:[function(require,module,exports){
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(ls) {
          return ls.join("")
      },
      peg$c1 = "A",
      peg$c2 = peg$literalExpectation("A", false),
      peg$c3 = function() {
          return "\u0531";
      },
      peg$c4 = "B",
      peg$c5 = peg$literalExpectation("B", false),
      peg$c6 = function() {
          return "\u0532";
      },
      peg$c7 = "C",
      peg$c8 = peg$literalExpectation("C", false),
      peg$c9 = /^[h']/,
      peg$c10 = peg$classExpectation(["h", "'"], false, false),
      peg$c11 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u0549";
              case "'":
                  return "\u053E";
              default:
                  return "\u0551";
          }
      },
      peg$c12 = "D",
      peg$c13 = peg$literalExpectation("D", false),
      peg$c14 = "z",
      peg$c15 = peg$literalExpectation("z", false),
      peg$c16 = function(suffix) {
          switch (suffix ) {
              case "z":
                  return "\u0541";
              default:
                  return "\u0534";
          }
      },
      peg$c17 = "E",
      peg$c18 = peg$literalExpectation("E", false),
      peg$c19 = "'",
      peg$c20 = peg$literalExpectation("'", false),
      peg$c21 = function(suffix) {
          switch (suffix ) {
              case "'":
                  return "\u0537";
              default:
                  return "\u0535";
          }
      },
      peg$c22 = "F",
      peg$c23 = peg$literalExpectation("F", false),
      peg$c24 = function() {
          return "\u0556";
      },
      peg$c25 = "G",
      peg$c26 = peg$literalExpectation("G", false),
      peg$c27 = "h",
      peg$c28 = peg$literalExpectation("h", false),
      peg$c29 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u0542";
              default:
                  return "\u0533";
          }
      },
      peg$c30 = "H",
      peg$c31 = peg$literalExpectation("H", false),
      peg$c32 = function() {
          return "\u0540";
      },
      peg$c33 = "I",
      peg$c34 = peg$literalExpectation("I", false),
      peg$c35 = function() {
          return "\u053B";
      },
      peg$c36 = "J",
      peg$c37 = peg$literalExpectation("J", false),
      peg$c38 = function() {
          return "\u054B";
      },
      peg$c39 = "K",
      peg$c40 = peg$literalExpectation("K", false),
      peg$c41 = function() {
          return "\u053F";
      },
      peg$c42 = "L",
      peg$c43 = peg$literalExpectation("L", false),
      peg$c44 = function() {
          return "\u053C";
      },
      peg$c45 = "M",
      peg$c46 = peg$literalExpectation("M", false),
      peg$c47 = function() {
          return "\u0544";
      },
      peg$c48 = "N",
      peg$c49 = peg$literalExpectation("N", false),
      peg$c50 = function() {
          return "\u0546";
      },
      peg$c51 = "O",
      peg$c52 = peg$literalExpectation("O", false),
      peg$c53 = function() {
          return "\u0555";
      },
      peg$c54 = "P",
      peg$c55 = peg$literalExpectation("P", false),
      peg$c56 = function(suffix) {
          switch (suffix ) {
              case "'":
                  return "\u0553";
              default:
                  return "\u054A";
          }
      },
      peg$c57 = "Q",
      peg$c58 = peg$literalExpectation("Q", false),
      peg$c59 = function() {
          return "\u0554";
      },
      peg$c60 = "R",
      peg$c61 = peg$literalExpectation("R", false),
      peg$c62 = "r",
      peg$c63 = peg$literalExpectation("r", false),
      peg$c64 = function(suffix) {
          switch (suffix ) {
              case "r":
                  return "\u054C";
              default:
                  return "\u0550";
          }
      },
      peg$c65 = "S",
      peg$c66 = peg$literalExpectation("S", false),
      peg$c67 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u0547";
              default:
                  return "\u054D";
          }
      },
      peg$c68 = "T",
      peg$c69 = peg$literalExpectation("T", false),
      peg$c70 = /^[w']/,
      peg$c71 = peg$classExpectation(["w", "'"], false, false),
      peg$c72 = function(suffix) {
          switch (suffix ) {
              case "w":
                  return "\u0543";
              case "'":
                  return "\u0539";
              default:
                  return "\u054F";
          }
      },
      peg$c73 = "U",
      peg$c74 = peg$literalExpectation("U", false),
      peg$c75 = function() {
          return "\u0548\u0582";
      },
      peg$c76 = "V",
      peg$c77 = peg$literalExpectation("V", false),
      peg$c78 = "o",
      peg$c79 = peg$literalExpectation("o", false),
      peg$c80 = function(suffix) {
          switch (suffix ) {
              case "o":
                  return "\u0548";
              default:
                  return "\u054E";
          }
      },
      peg$c81 = "W",
      peg$c82 = peg$literalExpectation("W", false),
      peg$c83 = function() {
          return "\u0552";
      },
      peg$c84 = "X",
      peg$c85 = peg$literalExpectation("X", false),
      peg$c86 = function() {
          return "\u053D";
      },
      peg$c87 = "Y",
      peg$c88 = peg$literalExpectation("Y", false),
      peg$c89 = function(suffix) {
          switch (suffix ) {
              case "'":
                  return "\u0538";
              default:
                  return "\u0545";
          }
      },
      peg$c90 = "Z",
      peg$c91 = peg$literalExpectation("Z", false),
      peg$c92 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u053A";
              default:
                  return "\u0536";
          }
      },
      peg$c93 = "a",
      peg$c94 = peg$literalExpectation("a", false),
      peg$c95 = function() {
          return "\u0561";
      },
      peg$c96 = "b",
      peg$c97 = peg$literalExpectation("b", false),
      peg$c98 = function() {
          return "\u0562";
      },
      peg$c99 = "c",
      peg$c100 = peg$literalExpectation("c", false),
      peg$c101 = function(suffix) {

          switch (suffix ) {
              case "h":
                  return "\u0579";
              case "'":
                  return "\u056E";
              default:
                  return "\u0581";
          }
      },
      peg$c102 = "d",
      peg$c103 = peg$literalExpectation("d", false),
      peg$c104 = function(suffix) {
          switch (suffix ) {
              case "z":
                  return "\u0571";
              default:
                  return "\u0564";
          }
      },
      peg$c105 = "e",
      peg$c106 = peg$literalExpectation("e", false),
      peg$c107 = /^[v']/,
      peg$c108 = peg$classExpectation(["v", "'"], false, false),
      peg$c109 = function(suffix) {
          switch (suffix ) {
              case "v":
                  return "\u0587";
              case "'":
                  return "\u0567";
              default:
                  return "\u0565";
          }
      },
      peg$c110 = "f",
      peg$c111 = peg$literalExpectation("f", false),
      peg$c112 = function() {
          return "\u0586";
      },
      peg$c113 = "g",
      peg$c114 = peg$literalExpectation("g", false),
      peg$c115 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u0572";
              default:
                  return "\u0563";
          }
      },
      peg$c116 = function() {
          return "\u0570";
      },
      peg$c117 = "i",
      peg$c118 = peg$literalExpectation("i", false),
      peg$c119 = function() {
          return "\u056B";
      },
      peg$c120 = "j",
      peg$c121 = peg$literalExpectation("j", false),
      peg$c122 = function() {
          return "\u057B";
      },
      peg$c123 = "k",
      peg$c124 = peg$literalExpectation("k", false),
      peg$c125 = function() {
          return "\u056F";
      },
      peg$c126 = "l",
      peg$c127 = peg$literalExpectation("l", false),
      peg$c128 = function() {
          return "\u056C";
      },
      peg$c129 = "m",
      peg$c130 = peg$literalExpectation("m", false),
      peg$c131 = function() {
          return "\u0574";
      },
      peg$c132 = "n",
      peg$c133 = peg$literalExpectation("n", false),
      peg$c134 = function() {
          return "\u0576";
      },
      peg$c135 = function() {
          return "\u0585";
      },
      peg$c136 = "p",
      peg$c137 = peg$literalExpectation("p", false),
      peg$c138 = function(suffix) {
          switch (suffix ) {
              case "'":
                  return "\u0583";
              default:
                  return "\u057A";
          }
      },
      peg$c139 = "q",
      peg$c140 = peg$literalExpectation("q", false),
      peg$c141 = function() {
          return "\u0584";
      },
      peg$c142 = function(suffix) {
          switch (suffix ) {
              case "r":
                  return "\u057C";
              default:
                  return "\u0580";
          }
      },
      peg$c143 = "s",
      peg$c144 = peg$literalExpectation("s", false),
      peg$c145 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u0577";
              default:
                  return "\u057D";
          }
      },
      peg$c146 = "t",
      peg$c147 = peg$literalExpectation("t", false),
      peg$c148 = function(suffix) {
          switch (suffix ) {
              case "w":
                  return "\u0573";
              case "'":
                  return "\u0569";
              default:
                  return "\u057F";
          }
      },
      peg$c149 = "u",
      peg$c150 = peg$literalExpectation("u", false),
      peg$c151 = function() {
          return "\u0578\u0582";
      },
      peg$c152 = "v",
      peg$c153 = peg$literalExpectation("v", false),
      peg$c154 = function(suffix) {
          switch (suffix ) {
              case "o":
                  return "\u0578";
              default:
                  return "\u057E";
          }
      },
      peg$c155 = "w",
      peg$c156 = peg$literalExpectation("w", false),
      peg$c157 = function() {
          return "\u0582";
      },
      peg$c158 = "x",
      peg$c159 = peg$literalExpectation("x", false),
      peg$c160 = function() {
          return "\u056D";
      },
      peg$c161 = "y",
      peg$c162 = peg$literalExpectation("y", false),
      peg$c163 = function(suffix) {
          switch (suffix ) {
              case "'":
                  return "\u0568";
              default:
                  return "\u0575";
          }
      },
      peg$c164 = function(suffix) {
          switch (suffix ) {
              case "h":
                  return "\u056A";
              default:
                  return "\u0566";
          }
      },
      peg$c165 = "$",
      peg$c166 = peg$literalExpectation("$", false),
      peg$c167 = function() {
          return "\u058F";
      },
      peg$c168 = /^[0-9]/,
      peg$c169 = peg$classExpectation([["0", "9"]], false, false),
      peg$c170 = function(text) {
          return text.join("");
      },
      peg$c171 = ",",
      peg$c172 = peg$literalExpectation(",", false),
      peg$c173 = function(text) {
          return text;
      },
      peg$c174 = ".",
      peg$c175 = peg$literalExpectation(".", false),
      peg$c176 = "`",
      peg$c177 = peg$literalExpectation("`", false),
      peg$c178 = function() {
          return "\u055D";
      },
      peg$c179 = ":",
      peg$c180 = peg$literalExpectation(":", false),
      peg$c181 = function() {
          return "\u0589";
      },
      peg$c182 = "-",
      peg$c183 = peg$literalExpectation("-", false),
      peg$c184 = "(",
      peg$c185 = peg$literalExpectation("(", false),
      peg$c186 = ")",
      peg$c187 = peg$literalExpectation(")", false),
      peg$c188 = "<<",
      peg$c189 = peg$literalExpectation("<<", false),
      peg$c190 = function() {
          return "\u00AB";
      },
      peg$c191 = ">>",
      peg$c192 = peg$literalExpectation(">>", false),
      peg$c193 = function() {
          return "\u00BB";
      },
      peg$c194 = "?",
      peg$c195 = peg$literalExpectation("?", false),
      peg$c196 = function() {
          return "\u055E";
      },
      peg$c197 = "!",
      peg$c198 = peg$literalExpectation("!", false),
      peg$c199 = "~",
      peg$c200 = peg$literalExpectation("~", false),
      peg$c201 = function(suffix) {
          switch (suffix) {
              case "~":
                  return "\u055C";
              default:
                  return "\u055B";
          }
      },
      peg$c202 = /^[ \t]/,
      peg$c203 = peg$classExpectation([" ", "\t"], false, false),
      peg$c204 = "\r",
      peg$c205 = peg$literalExpectation("\r", false),
      peg$c206 = "\n",
      peg$c207 = peg$literalExpectation("\n", false),
      peg$c208 = function(r, n) {
          if (r) {
              return r + n;
          } else {
              return n;
          }
      },
      peg$c209 = peg$anyExpectation(),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parseletters();

    return s0;
  }

  function peg$parseletters() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseletter();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseletter();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseletter() {
    var s0;

    s0 = peg$parselargeA();
    if (s0 === peg$FAILED) {
      s0 = peg$parselargeB();
      if (s0 === peg$FAILED) {
        s0 = peg$parselargeC();
        if (s0 === peg$FAILED) {
          s0 = peg$parselargeD();
          if (s0 === peg$FAILED) {
            s0 = peg$parselargeE();
            if (s0 === peg$FAILED) {
              s0 = peg$parselargeF();
              if (s0 === peg$FAILED) {
                s0 = peg$parselargeG();
                if (s0 === peg$FAILED) {
                  s0 = peg$parselargeH();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parselargeI();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parselargeJ();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parselargeK();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parselargeL();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parselargeM();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parselargeN();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parselargeO();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parselargeP();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parselargeQ();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parselargeR();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parselargeS();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parselargeT();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parselargeU();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parselargeV();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parselargeW();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parselargeX();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parselargeY();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parselargeZ();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsesmallA();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsesmallB();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsesmallC();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsesmallD();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsesmallE();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsesmallF();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsesmallG();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsesmallH();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsesmallI();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsesmallJ();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsesmallK();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsesmallL();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsesmallM();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parsesmallN();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parsesmallO();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parsesmallP();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parsesmallQ();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parsesmallR();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parsesmallS();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parsesmallT();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parsesmallU();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parsesmallV();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parsesmallW();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parsesmallX();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parsesmallY();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parsesmallZ();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parsedollar();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parsedigits();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parsecomma();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseperiod();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parsebackquote();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parsecolon();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parsehyphen();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseleftParenthesis();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parserightParenthesis();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parseleftGuillemets();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parserightGuillemets();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parsequestion();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parseexclamation();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parsespace();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parsenewline();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parseanychar();
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselargeA() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 65) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c3();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeB() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 66) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 67) {
      s1 = peg$c7;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 68) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 122) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c16(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 69) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeF() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 70) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c24();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeG() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 71) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 72) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c32();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeI() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 73) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c35();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeJ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 74) {
      s1 = peg$c36;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeK() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 75) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 76) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c44();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeM() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 77) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeN() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 78) {
      s1 = peg$c48;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeO() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 79) {
      s1 = peg$c51;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c53();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 80) {
      s1 = peg$c54;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c56(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 81) {
      s1 = peg$c57;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c59();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 82) {
      s1 = peg$c60;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c61); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 114) {
        s2 = peg$c62;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 83) {
      s1 = peg$c65;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c67(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 84) {
      s1 = peg$c68;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c70.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c72(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeU() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 85) {
      s1 = peg$c73;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 86) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 111) {
        s2 = peg$c78;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeW() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 87) {
      s1 = peg$c81;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c83();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeX() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 88) {
      s1 = peg$c84;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c86();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselargeY() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 89) {
      s1 = peg$c87;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c89(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselargeZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 90) {
      s1 = peg$c90;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c91); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c92(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallA() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 97) {
      s1 = peg$c93;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c94); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c95();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallB() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      s1 = peg$c96;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c98();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallC() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 99) {
      s1 = peg$c99;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c101(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallD() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 100) {
      s1 = peg$c102;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 122) {
        s2 = peg$c14;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c104(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 101) {
      s1 = peg$c105;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c107.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c109(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallF() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 102) {
      s1 = peg$c110;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c112();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallG() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 103) {
      s1 = peg$c113;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c115(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 104) {
      s1 = peg$c27;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c116();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallI() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 105) {
      s1 = peg$c117;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c119();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallJ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 106) {
      s1 = peg$c120;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c121); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c122();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallK() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 107) {
      s1 = peg$c123;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c124); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c125();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 108) {
      s1 = peg$c126;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c128();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallM() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c129;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c131();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallN() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      s1 = peg$c132;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c133); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c134();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallO() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 111) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c135();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallP() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 112) {
      s1 = peg$c136;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c138(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 113) {
      s1 = peg$c139;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c141();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallR() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 114) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 114) {
        s2 = peg$c62;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c142(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c143;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c145(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      s1 = peg$c146;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c147); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c70.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c148(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallU() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 117) {
      s1 = peg$c149;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c151();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallV() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      s1 = peg$c152;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c153); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 111) {
        s2 = peg$c78;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c154(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallW() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 119) {
      s1 = peg$c155;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c157();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallX() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 120) {
      s1 = peg$c158;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c159); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c160();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesmallY() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 121) {
      s1 = peg$c161;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c163(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmallZ() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 122) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 104) {
        s2 = peg$c27;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c164(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedollar() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c165;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c167();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedigits() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c168.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c168.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c170(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecomma() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c171;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c172); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseperiod() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c174;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c175); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebackquote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c176;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c177); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c178();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecolon() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c179;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c180); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c181();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehyphen() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c182;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c183); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseleftParenthesis() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c184;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c185); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parserightParenthesis() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 41) {
      s1 = peg$c186;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseleftGuillemets() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c188) {
      s1 = peg$c188;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c189); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c190();
    }
    s0 = s1;

    return s0;
  }

  function peg$parserightGuillemets() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c191) {
      s1 = peg$c191;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c193();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsequestion() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c194;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c196();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseexclamation() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c197;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c199;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c201(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespace() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c202.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenewline() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c204;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c205); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c206;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c208(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseanychar() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c209); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c173(s1);
    }
    s0 = s1;

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

},{}]},{},[1])(1)
});
